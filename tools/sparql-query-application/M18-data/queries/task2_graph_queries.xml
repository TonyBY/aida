<?xml version="1.0" encoding="UTF-8"?>
<graph_queries>
  <graph_query id="AIDA_TA2_GR_2019_0001">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.FirearmAttack_Attacker </predicate>
    <object> LDC2019E44:80000155 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0001
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.FirearmAttack_Attacker such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000155
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000155" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack.FirearmAttack_Attacker AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000155"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0002">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Attacker </predicate>
    <object> LDC2019E44:80000155 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0002
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Attacker such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000155
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000155" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack_Attacker AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000155"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0003">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.FirearmAttack_Place </predicate>
    <object> LDC2019E44:80000020 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0003
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.FirearmAttack_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000020
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000020" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack.FirearmAttack_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000020"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0004">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Place </predicate>
    <object> LDC2019E44:80000020 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0004
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000020
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000020" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000020"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0005">
    <subject> ?subject </subject>
    <predicate> Conflict.Demonstrate.MarchProtestPoliticalGathering_Place </predicate>
    <object> LDC2019E44:80000020 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0005
              # Query description: Find all edges of type ldcOnt:Conflict.Demonstrate.MarchProtestPoliticalGathering_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000020
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000020" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Demonstrate.MarchProtestPoliticalGathering_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000020"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0006">
    <subject> ?subject </subject>
    <predicate> Conflict.Demonstrate_Place </predicate>
    <object> LDC2019E44:80000020 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0006
              # Query description: Find all edges of type ldcOnt:Conflict.Demonstrate_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000020
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000020" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Demonstrate_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000020"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0007">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.Sponsorship_Sponsor </predicate>
    <object> LDC2019E44:80000063 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0007
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.Sponsorship_Sponsor such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000063
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000063" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.Sponsorship_Sponsor AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000063"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0008">
    <subject> ?subject </subject>
    <predicate> Physical.LocatedNear_EntityOrFiller </predicate>
    <object> LDC2019E44:80000020 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0008
              # Query description: Find all edges of type ldcOnt:Physical.LocatedNear_EntityOrFiller such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000020
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000020" AS ?olink_target_q)
                  BIND (ldcOnt:Physical.LocatedNear_EntityOrFiller AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000020"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0009">
    <subject> ?subject </subject>
    <predicate> Physical.LocatedNear_Place </predicate>
    <object> LDC2019E44:703448 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0009
              # Query description: Find all edges of type ldcOnt:Physical.LocatedNear_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:703448
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:703448" AS ?olink_target_q)
                  BIND (ldcOnt:Physical.LocatedNear_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:703448"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0010">
    <subject> ?subject </subject>
    <predicate> Life.Die.DeathCausedByViolentEvents_Killer </predicate>
    <object> LDC2019E44:80000155 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0010
              # Query description: Find all edges of type ldcOnt:Life.Die.DeathCausedByViolentEvents_Killer such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000155
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000155" AS ?olink_target_q)
                  BIND (ldcOnt:Life.Die.DeathCausedByViolentEvents_Killer AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000155"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0011">
    <subject> ?subject </subject>
    <predicate> Life.Die.DeathCausedByViolentEvents_Place </predicate>
    <object> LDC2019E44:80000020 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0011
              # Query description: Find all edges of type ldcOnt:Life.Die.DeathCausedByViolentEvents_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000020
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000020" AS ?olink_target_q)
                  BIND (ldcOnt:Life.Die.DeathCausedByViolentEvents_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000020"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0012">
    <subject> ?subject </subject>
    <predicate> Life.Die_Place </predicate>
    <object> LDC2019E44:80000020 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0012
              # Query description: Find all edges of type ldcOnt:Life.Die_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000020
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000020" AS ?olink_target_q)
                  BIND (ldcOnt:Life.Die_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000020"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0013">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization </predicate>
    <object> LDC2019E44:80000063 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0013
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000063
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000063" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000063"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0014">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization </predicate>
    <object> LDC2019E44:80000063 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0014
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000063
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000063" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000063"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0015">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Nationality </predicate>
    <object> LDC2019E44:690791 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0015
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Nationality such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:690791
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:690791" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Nationality AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:690791"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0016">
    <subject> ?subject </subject>
    <predicate> OrganizationAffiliation.EmploymentMembership.Membership_PlaceOfMembership </predicate>
    <object> LDC2019E44:80000063 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0016
              # Query description: Find all edges of type ldcOnt:OrganizationAffiliation.EmploymentMembership.Membership_PlaceOfMembership such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000063
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000063" AS ?olink_target_q)
                  BIND (ldcOnt:OrganizationAffiliation.EmploymentMembership.Membership_PlaceOfMembership AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000063"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0017">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization </predicate>
    <object> LDC2019E44:80000331 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0017
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000331
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000331" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000331"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0018">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_EntityOrFiller </predicate>
    <object> LDC2019E44:80000063 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0018
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_EntityOrFiller such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000063
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000063" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_EntityOrFiller AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000063"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0019">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_EntityOrFiller </predicate>
    <object> LDC2019E44:80000306 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0019
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_EntityOrFiller such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000306
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000306" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_EntityOrFiller AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000306"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0020">
    <subject> ?subject </subject>
    <predicate> OrganizationAffiliation.EmploymentMembership_PlaceOfEmploymentMembership </predicate>
    <object> LDC2019E44:80000093 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0020
              # Query description: Find all edges of type ldcOnt:OrganizationAffiliation.EmploymentMembership_PlaceOfEmploymentMembership such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000093
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000093" AS ?olink_target_q)
                  BIND (ldcOnt:OrganizationAffiliation.EmploymentMembership_PlaceOfEmploymentMembership AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000093"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0021">
    <subject> ?subject </subject>
    <predicate> Personnel.StartPosition.Hiring_Employee </predicate>
    <object> LDC2019E44:80000156 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0021
              # Query description: Find all edges of type ldcOnt:Personnel.StartPosition.Hiring_Employee such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000156
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000156" AS ?olink_target_q)
                  BIND (ldcOnt:Personnel.StartPosition.Hiring_Employee AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000156"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0022">
    <subject> ?subject </subject>
    <predicate> Personnel.StartPosition_Employee </predicate>
    <object> LDC2019E44:80000156 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0022
              # Query description: Find all edges of type ldcOnt:Personnel.StartPosition_Employee such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000156
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000156" AS ?olink_target_q)
                  BIND (ldcOnt:Personnel.StartPosition_Employee AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000156"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0023">
    <subject> ?subject </subject>
    <predicate> Personnel.StartPosition.Hiring_PlaceOfEmployment </predicate>
    <object> LDC2019E44:2017370 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0023
              # Query description: Find all edges of type ldcOnt:Personnel.StartPosition.Hiring_PlaceOfEmployment such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:2017370
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:2017370" AS ?olink_target_q)
                  BIND (ldcOnt:Personnel.StartPosition.Hiring_PlaceOfEmployment AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:2017370"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0024">
    <subject> ?subject </subject>
    <predicate> Personnel.StartPosition_PlaceOfEmployment </predicate>
    <object> LDC2019E44:2017370 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0024
              # Query description: Find all edges of type ldcOnt:Personnel.StartPosition_PlaceOfEmployment such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:2017370
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:2017370" AS ?olink_target_q)
                  BIND (ldcOnt:Personnel.StartPosition_PlaceOfEmployment AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:2017370"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0025">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.FirearmAttack_Attacker </predicate>
    <object> LDC2019E44:80000156 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0025
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.FirearmAttack_Attacker such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000156
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000156" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack.FirearmAttack_Attacker AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000156"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0026">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Attacker </predicate>
    <object> LDC2019E44:80000156 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0026
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Attacker such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000156
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000156" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack_Attacker AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000156"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0027">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.Sponsorship.AdvisePlanOrganize_Sponsor </predicate>
    <object> LDC2019E44:2017370 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0027
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.Sponsorship.AdvisePlanOrganize_Sponsor such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:2017370
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:2017370" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.Sponsorship.AdvisePlanOrganize_Sponsor AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:2017370"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0028">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.Sponsorship_Sponsor </predicate>
    <object> LDC2019E44:2017370 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0028
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.Sponsorship_Sponsor such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:2017370
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:2017370" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.Sponsorship_Sponsor AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:2017370"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0029">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.Sponsorship_Sponsor </predicate>
    <object> LDC2019E44:80000069 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0029
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.Sponsorship_Sponsor such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000069
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000069" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.Sponsorship_Sponsor AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000069"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0030">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization </predicate>
    <object> LDC2019E44:80000069 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0030
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000069
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000069" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000069"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0031">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization </predicate>
    <object> LDC2019E44:80000069 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0031
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000069
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000069" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000069"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0032">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Nationality </predicate>
    <object> LDC2019E44:6252001 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0032
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Nationality such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:6252001
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:6252001" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Nationality AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:6252001"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0033">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.FirearmAttack_Attacker </predicate>
    <object> LDC2019E44:80000152 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0033
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.FirearmAttack_Attacker such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000152
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000152" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack.FirearmAttack_Attacker AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000152"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0034">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Attacker </predicate>
    <object> LDC2019E44:80000152 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0034
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Attacker such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000152
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000152" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack_Attacker AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000152"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0035">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.FirearmAttack_Instrument </predicate>
    <object> LDC2019E44:80000332 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0035
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.FirearmAttack_Instrument such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000332
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000332" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack.FirearmAttack_Instrument AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000332"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0036">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Instrument </predicate>
    <object> LDC2019E44:80000332 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0036
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Instrument such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000332
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000332" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack_Instrument AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000332"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0037">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.FirearmAttack_Place </predicate>
    <object> LDC2019E44:80000016 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0037
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.FirearmAttack_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000016
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000016" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack.FirearmAttack_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000016"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0038">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Place </predicate>
    <object> LDC2019E44:80000016 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0038
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000016
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000016" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000016"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0039">
    <subject> ?subject </subject>
    <predicate> Movement.TransportArtifact.Hide_Transporter </predicate>
    <object> LDC2019E44:80000152 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0039
              # Query description: Find all edges of type ldcOnt:Movement.TransportArtifact.Hide_Transporter such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000152
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000152" AS ?olink_target_q)
                  BIND (ldcOnt:Movement.TransportArtifact.Hide_Transporter AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000152"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0040">
    <subject> ?subject </subject>
    <predicate> Movement.TransportArtifact.Hide_Artifact </predicate>
    <object> LDC2019E44:80000332 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0040
              # Query description: Find all edges of type ldcOnt:Movement.TransportArtifact.Hide_Artifact such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000332
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000332" AS ?olink_target_q)
                  BIND (ldcOnt:Movement.TransportArtifact.Hide_Artifact AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000332"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0041">
    <subject> ?subject </subject>
    <predicate> Movement.TransportArtifact_Artifact </predicate>
    <object> LDC2019E44:80000332 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0041
              # Query description: Find all edges of type ldcOnt:Movement.TransportArtifact_Artifact such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000332
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000332" AS ?olink_target_q)
                  BIND (ldcOnt:Movement.TransportArtifact_Artifact AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000332"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0042">
    <subject> ?subject </subject>
    <predicate> Movement.TransportArtifact.Hide_HidingPlace </predicate>
    <object> LDC2019E44:80000334 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0042
              # Query description: Find all edges of type ldcOnt:Movement.TransportArtifact.Hide_HidingPlace such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000334
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000334" AS ?olink_target_q)
                  BIND (ldcOnt:Movement.TransportArtifact.Hide_HidingPlace AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000334"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0043">
    <subject> ?subject </subject>
    <predicate> Physical.LocatedNear_EntityOrFiller </predicate>
    <object> LDC2019E44:80000334 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0043
              # Query description: Find all edges of type ldcOnt:Physical.LocatedNear_EntityOrFiller such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000334
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000334" AS ?olink_target_q)
                  BIND (ldcOnt:Physical.LocatedNear_EntityOrFiller AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000334"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0044">
    <subject> ?subject </subject>
    <predicate> Physical.LocatedNear_Place </predicate>
    <object> LDC2019E44:80000020 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0044
              # Query description: Find all edges of type ldcOnt:Physical.LocatedNear_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000020
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000020" AS ?olink_target_q)
                  BIND (ldcOnt:Physical.LocatedNear_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000020"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0045">
    <subject> ?subject </subject>
    <predicate> Physical.LocatedNear_EntityOrFiller </predicate>
    <object> LDC2019E44:80000016 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0045
              # Query description: Find all edges of type ldcOnt:Physical.LocatedNear_EntityOrFiller such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000016
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000016" AS ?olink_target_q)
                  BIND (ldcOnt:Physical.LocatedNear_EntityOrFiller AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000016"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0046">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.MemberOriginReligionEthnicity_Person </predicate>
    <object> LDC2019E44:80000152 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0046
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_Person such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000152
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000152" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_Person AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000152"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0047">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.MemberOriginReligionEthnicity_EntityOrFiller </predicate>
    <object> LDC2019E44:80000304 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0047
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_EntityOrFiller such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000304
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000304" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_EntityOrFiller AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000304"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0048">
    <subject> ?subject </subject>
    <predicate> Information.Make.Make_EntityOrFiller </predicate>
    <object> LDC2019E44:80000332 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0048
              # Query description: Find all edges of type ldcOnt:Information.Make.Make_EntityOrFiller such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000332
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000332" AS ?olink_target_q)
                  BIND (ldcOnt:Information.Make.Make_EntityOrFiller AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000332"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0049">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.FirearmAttack_Instrument </predicate>
    <object> LDC2019E44:80000325 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0049
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.FirearmAttack_Instrument such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000325
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000325" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack.FirearmAttack_Instrument AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000325"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0050">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Instrument </predicate>
    <object> LDC2019E44:80000325 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0050
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Instrument such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000325
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000325" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack_Instrument AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000325"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0051">
    <subject> ?subject </subject>
    <predicate> OrganizationAffiliation.EmploymentMembership_EmployeeMember </predicate>
    <object> LDC2019E44:80000155 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0051
              # Query description: Find all edges of type ldcOnt:OrganizationAffiliation.EmploymentMembership_EmployeeMember such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000155
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000155" AS ?olink_target_q)
                  BIND (ldcOnt:OrganizationAffiliation.EmploymentMembership_EmployeeMember AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000155"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0052">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization </predicate>
    <object> LDC2019E44:80000093 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0052
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000093
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000093" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000093"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0053">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization </predicate>
    <object> LDC2019E44:80000093 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0053
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000093
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000093" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000093"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0054">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.MemberOriginReligionEthnicity_Person </predicate>
    <object> LDC2019E44:80000145 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0054
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_Person such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000145
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000145" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_Person AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000145"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0055">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.MemberOriginReligionEthnicity_EntityOrFiller </predicate>
    <object> LDC2019E44:80000155 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0055
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_EntityOrFiller such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000155
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000155" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_EntityOrFiller AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000155"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0056">
    <subject> ?subject </subject>
    <predicate> OrganizationAffiliation.Leadership.Government_Leader </predicate>
    <object> LDC2019E44:80000145 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0056
              # Query description: Find all edges of type ldcOnt:OrganizationAffiliation.Leadership.Government_Leader such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000145
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000145" AS ?olink_target_q)
                  BIND (ldcOnt:OrganizationAffiliation.Leadership.Government_Leader AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000145"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0057">
    <subject> ?subject </subject>
    <predicate> OrganizationAffiliation.Leadership_Leader </predicate>
    <object> LDC2019E44:80000145 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0057
              # Query description: Find all edges of type ldcOnt:OrganizationAffiliation.Leadership_Leader such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000145
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000145" AS ?olink_target_q)
                  BIND (ldcOnt:OrganizationAffiliation.Leadership_Leader AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000145"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0058">
    <subject> ?subject </subject>
    <predicate> OrganizationAffiliation.Leadership.Government_GovernmentBodyOrGPE </predicate>
    <object> LDC2019E44:80000066 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0058
              # Query description: Find all edges of type ldcOnt:OrganizationAffiliation.Leadership.Government_GovernmentBodyOrGPE such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000066
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000066" AS ?olink_target_q)
                  BIND (ldcOnt:OrganizationAffiliation.Leadership.Government_GovernmentBodyOrGPE AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000066"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0059">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization </predicate>
    <object> LDC2019E44:80000066 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0059
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000066
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000066" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000066"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0060">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization </predicate>
    <object> LDC2019E44:80000066 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0060
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000066
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000066" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000066"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0061">
    <subject> ?subject </subject>
    <predicate> Contact.Collaborate_Participant </predicate>
    <object> LDC2019E44:80000155 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0061
              # Query description: Find all edges of type ldcOnt:Contact.Collaborate_Participant such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000155
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000155" AS ?olink_target_q)
                  BIND (ldcOnt:Contact.Collaborate_Participant AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000155"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0062">
    <subject> ?subject </subject>
    <predicate> Contact.Collaborate_Participant </predicate>
    <object> LDC2019E44:80000080 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0062
              # Query description: Find all edges of type ldcOnt:Contact.Collaborate_Participant such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000080
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000080" AS ?olink_target_q)
                  BIND (ldcOnt:Contact.Collaborate_Participant AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000080"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0063">
    <subject> ?subject </subject>
    <predicate> Contact.Collaborate_Place </predicate>
    <object> LDC2019E44:80000020 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0063
              # Query description: Find all edges of type ldcOnt:Contact.Collaborate_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000020
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000020" AS ?olink_target_q)
                  BIND (ldcOnt:Contact.Collaborate_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000020"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0064">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.Sponsorship.HelpSupport_Sponsor </predicate>
    <object> LDC2019E44:80000080 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0064
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.Sponsorship.HelpSupport_Sponsor such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000080
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000080" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.Sponsorship.HelpSupport_Sponsor AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000080"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0065">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.Sponsorship_Sponsor </predicate>
    <object> LDC2019E44:80000080 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0065
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.Sponsorship_Sponsor such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000080
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000080" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.Sponsorship_Sponsor AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000080"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0066">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization </predicate>
    <object> LDC2019E44:80000080 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0066
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000080
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000080" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000080"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0067">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization </predicate>
    <object> LDC2019E44:80000080 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0067
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000080
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000080" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000080"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0068">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Nationality </predicate>
    <object> LDC2019E44:2017370 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0068
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Nationality such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:2017370
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:2017370" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Nationality AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:2017370"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0069">
    <subject> ?subject </subject>
    <predicate> Life.Die.DeathCausedByViolentEvents_Instrument </predicate>
    <object> LDC2019E44:80000325 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0069
              # Query description: Find all edges of type ldcOnt:Life.Die.DeathCausedByViolentEvents_Instrument such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000325
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000325" AS ?olink_target_q)
                  BIND (ldcOnt:Life.Die.DeathCausedByViolentEvents_Instrument AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000325"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0070">
    <subject> ?subject </subject>
    <predicate> Government.Agreements.AcceptAgreementContractCeasefire_Participant </predicate>
    <object> LDC2019E44:690791 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0070
              # Query description: Find all edges of type ldcOnt:Government.Agreements.AcceptAgreementContractCeasefire_Participant such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:690791
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:690791" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Agreements.AcceptAgreementContractCeasefire_Participant AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:690791"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0071">
    <subject> ?subject </subject>
    <predicate> Government.Agreements.AcceptAgreementContractCeasefire_Place </predicate>
    <object> LDC2019E44:625144 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0071
              # Query description: Find all edges of type ldcOnt:Government.Agreements.AcceptAgreementContractCeasefire_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:625144
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:625144" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Agreements.AcceptAgreementContractCeasefire_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:625144"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0072">
    <subject> ?subject </subject>
    <predicate> Government.Agreements_Place </predicate>
    <object> LDC2019E44:625144 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0072
              # Query description: Find all edges of type ldcOnt:Government.Agreements_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:625144
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:625144" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Agreements_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:625144"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0073">
    <subject> ?subject </subject>
    <predicate> Government.Agreements.ViolateAgreement_Violator </predicate>
    <object> LDC2019E44:690791 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0073
              # Query description: Find all edges of type ldcOnt:Government.Agreements.ViolateAgreement_Violator such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:690791
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:690791" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Agreements.ViolateAgreement_Violator AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:690791"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0074">
    <subject> ?subject </subject>
    <predicate> Government.Agreements.ViolateAgreement_Place </predicate>
    <object> LDC2019E44:709716|LDC2019E44:80000046 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0074
              # Query description: Find all edges of type ldcOnt:Government.Agreements.ViolateAgreement_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709716|LDC2019E44:80000046
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709716|LDC2019E44:80000046" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Agreements.ViolateAgreement_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709716|LDC2019E44:80000046"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0075">
    <subject> ?subject </subject>
    <predicate> Government.Agreements_Place </predicate>
    <object> LDC2019E44:709716|LDC2019E44:80000046 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0075
              # Query description: Find all edges of type ldcOnt:Government.Agreements_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709716|LDC2019E44:80000046
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709716|LDC2019E44:80000046" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Agreements_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709716|LDC2019E44:80000046"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0076">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.SelfDirectedBattle_Attacker </predicate>
    <object> LDC2019E44:690791 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0076
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.SelfDirectedBattle_Attacker such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:690791
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:690791" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack.SelfDirectedBattle_Attacker AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:690791"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0077">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Attacker </predicate>
    <object> LDC2019E44:690791 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0077
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Attacker such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:690791
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:690791" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack_Attacker AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:690791"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0078">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.SelfDirectedBattle_Place </predicate>
    <object> LDC2019E44:709716|LDC2019E44:80000046 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0078
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.SelfDirectedBattle_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709716|LDC2019E44:80000046
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709716|LDC2019E44:80000046" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack.SelfDirectedBattle_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709716|LDC2019E44:80000046"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0079">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Place </predicate>
    <object> LDC2019E44:709716|LDC2019E44:80000046 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0079
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709716|LDC2019E44:80000046
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709716|LDC2019E44:80000046" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709716|LDC2019E44:80000046"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0080">
    <subject> ?subject </subject>
    <predicate> Movement.TransportPerson_Transporter </predicate>
    <object> LDC2019E44:690791 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0080
              # Query description: Find all edges of type ldcOnt:Movement.TransportPerson_Transporter such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:690791
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:690791" AS ?olink_target_q)
                  BIND (ldcOnt:Movement.TransportPerson_Transporter AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:690791"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0081">
    <subject> ?subject </subject>
    <predicate> Movement.TransportPerson_Destination </predicate>
    <object> LDC2019E44:710229 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0081
              # Query description: Find all edges of type ldcOnt:Movement.TransportPerson_Destination such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:710229
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:710229" AS ?olink_target_q)
                  BIND (ldcOnt:Movement.TransportPerson_Destination AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:710229"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0082">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.SelfDirectedBattle_Place </predicate>
    <object> LDC2019E44:710229 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0082
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.SelfDirectedBattle_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:710229
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:710229" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack.SelfDirectedBattle_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:710229"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0083">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Place </predicate>
    <object> LDC2019E44:710229 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0083
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:710229
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:710229" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:710229"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0084">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.SelfDirectedBattle_Target </predicate>
    <object> LDC2019E44:690791 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0084
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.SelfDirectedBattle_Target such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:690791
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:690791" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack.SelfDirectedBattle_Target AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:690791"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0085">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Target </predicate>
    <object> LDC2019E44:690791 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0085
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Target such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:690791
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:690791" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack_Target AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:690791"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0086">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality </predicate>
    <object> LDC2019E44:690791 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0086
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:690791
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:690791" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:690791"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0087">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.MemberOriginReligionEthnicity_EntityOrFiller </predicate>
    <object> LDC2019E44:2017370 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0087
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_EntityOrFiller such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:2017370
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:2017370" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_EntityOrFiller AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:2017370"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0088">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality </predicate>
    <object> LDC2019E44:709716|LDC2019E44:80000046 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0088
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709716|LDC2019E44:80000046
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709716|LDC2019E44:80000046" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709716|LDC2019E44:80000046"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0089">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality </predicate>
    <object> LDC2019E44:702657|LDC2019E44:80000058 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0089
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:702657|LDC2019E44:80000058
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:702657|LDC2019E44:80000058" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:702657|LDC2019E44:80000058"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0090">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality </predicate>
    <object> LDC2019E44:2017370 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0090
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:2017370
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:2017370" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:2017370"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0091">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality </predicate>
    <object> LDC2019E44:6290252 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0091
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:6290252
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:6290252" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:6290252"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0092">
    <subject> ?subject </subject>
    <predicate> Government.Vote.CastVote_Place </predicate>
    <object> LDC2019E44:709718 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0092
              # Query description: Find all edges of type ldcOnt:Government.Vote.CastVote_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709718
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709718" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Vote.CastVote_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709718"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0093">
    <subject> ?subject </subject>
    <predicate> Government.Vote_Place </predicate>
    <object> LDC2019E44:709718 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0093
              # Query description: Find all edges of type ldcOnt:Government.Vote_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709718
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709718" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Vote_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709718"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0094">
    <subject> ?subject </subject>
    <predicate> Government.Vote.ViolationsPreventVote_Place </predicate>
    <object> LDC2019E44:709718 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0094
              # Query description: Find all edges of type ldcOnt:Government.Vote.ViolationsPreventVote_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709718
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709718" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Vote.ViolationsPreventVote_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709718"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0095">
    <subject> ?subject </subject>
    <predicate> Justice.ArrestJailDetain.ArrestJailDetain_Place </predicate>
    <object> LDC2019E44:709718 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0095
              # Query description: Find all edges of type ldcOnt:Justice.ArrestJailDetain.ArrestJailDetain_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709718
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709718" AS ?olink_target_q)
                  BIND (ldcOnt:Justice.ArrestJailDetain.ArrestJailDetain_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709718"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0096">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Place </predicate>
    <object> LDC2019E44:709718 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0096
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709718
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709718" AS ?olink_target_q)
                  BIND (ldcOnt:Conflict.Attack_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709718"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0097">
    <subject> ?subject </subject>
    <predicate> Life.Die.DeathCausedByViolentEvents_Place </predicate>
    <object> LDC2019E44:709718 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0097
              # Query description: Find all edges of type ldcOnt:Life.Die.DeathCausedByViolentEvents_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709718
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709718" AS ?olink_target_q)
                  BIND (ldcOnt:Life.Die.DeathCausedByViolentEvents_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709718"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0098">
    <subject> ?subject </subject>
    <predicate> Life.Die_Place </predicate>
    <object> LDC2019E44:709718 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0098
              # Query description: Find all edges of type ldcOnt:Life.Die_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709718
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709718" AS ?olink_target_q)
                  BIND (ldcOnt:Life.Die_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709718"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0099">
    <subject> ?subject </subject>
    <predicate> Government.Vote.ViolationsPreventVote_Place </predicate>
    <object> LDC2019E44:80000056 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0099
              # Query description: Find all edges of type ldcOnt:Government.Vote.ViolationsPreventVote_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000056
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000056" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Vote.ViolationsPreventVote_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000056"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0100">
    <subject> ?subject </subject>
    <predicate> Government.Vote_Place </predicate>
    <object> LDC2019E44:80000056 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0100
              # Query description: Find all edges of type ldcOnt:Government.Vote_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000056
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000056" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Vote_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000056"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0101">
    <subject> ?subject </subject>
    <predicate> ArtifactExistence.DamageDestroy.Destroy_Place </predicate>
    <object> LDC2019E44:709718 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0101
              # Query description: Find all edges of type ldcOnt:ArtifactExistence.DamageDestroy.Destroy_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709718
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709718" AS ?olink_target_q)
                  BIND (ldcOnt:ArtifactExistence.DamageDestroy.Destroy_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709718"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0102">
    <subject> ?subject </subject>
    <predicate> ArtifactExistence.DamageDestroy_Place </predicate>
    <object> LDC2019E44:709718 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0102
              # Query description: Find all edges of type ldcOnt:ArtifactExistence.DamageDestroy_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709718
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709718" AS ?olink_target_q)
                  BIND (ldcOnt:ArtifactExistence.DamageDestroy_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709718"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0103">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation.NationalityCitizen_Nationality </predicate>
    <object> LDC2019E44:690791 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0103
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation.NationalityCitizen_Nationality such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:690791
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:690791" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation.NationalityCitizen_Nationality AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:690791"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0104">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.MemberOriginReligionEthnicity_EntityOrFiller </predicate>
    <object> LDC2019E44:80000309 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0104
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_EntityOrFiller such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000309
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000309" AS ?olink_target_q)
                  BIND (ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_EntityOrFiller AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000309"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0105">
    <subject> ?subject </subject>
    <predicate> Movement.TransportArtifact.BringCarryUnload_Artifact </predicate>
    <object> LDC2019E44:80000292 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0105
              # Query description: Find all edges of type ldcOnt:Movement.TransportArtifact.BringCarryUnload_Artifact such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000292
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000292" AS ?olink_target_q)
                  BIND (ldcOnt:Movement.TransportArtifact.BringCarryUnload_Artifact AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000292"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0106">
    <subject> ?subject </subject>
    <predicate> Movement.TransportArtifact_Artifact </predicate>
    <object> LDC2019E44:80000292 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0106
              # Query description: Find all edges of type ldcOnt:Movement.TransportArtifact_Artifact such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000292
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000292" AS ?olink_target_q)
                  BIND (ldcOnt:Movement.TransportArtifact_Artifact AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000292"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0107">
    <subject> ?subject </subject>
    <predicate> Movement.TransportArtifact.BringCarryUnload_Origin </predicate>
    <object> LDC2019E44:709718 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0107
              # Query description: Find all edges of type ldcOnt:Movement.TransportArtifact.BringCarryUnload_Origin such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709718
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709718" AS ?olink_target_q)
                  BIND (ldcOnt:Movement.TransportArtifact.BringCarryUnload_Origin AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709718"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0108">
    <subject> ?subject </subject>
    <predicate> Movement.TransportArtifact_Origin </predicate>
    <object> LDC2019E44:709718 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0108
              # Query description: Find all edges of type ldcOnt:Movement.TransportArtifact_Origin such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709718
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709718" AS ?olink_target_q)
                  BIND (ldcOnt:Movement.TransportArtifact_Origin AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709718"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0109">
    <subject> ?subject </subject>
    <predicate> Government.Vote.CastVote_Candidate </predicate>
    <object> LDC2019E44:80000311 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0109
              # Query description: Find all edges of type ldcOnt:Government.Vote.CastVote_Candidate such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000311
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000311" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Vote.CastVote_Candidate AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000311"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0110">
    <subject> ?subject </subject>
    <predicate> Government.Vote_Candidate </predicate>
    <object> LDC2019E44:80000311 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0110
              # Query description: Find all edges of type ldcOnt:Government.Vote_Candidate such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:80000311
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:80000311" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Vote_Candidate AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:80000311"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0111">
    <subject> ?subject </subject>
    <predicate> Government.Vote.CastVote_Place </predicate>
    <object> LDC2019E44:709716|LDC2019E44:80000046 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0111
              # Query description: Find all edges of type ldcOnt:Government.Vote.CastVote_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709716|LDC2019E44:80000046
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709716|LDC2019E44:80000046" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Vote.CastVote_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709716|LDC2019E44:80000046"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0112">
    <subject> ?subject </subject>
    <predicate> Government.Vote_Place </predicate>
    <object> LDC2019E44:709716|LDC2019E44:80000046 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0112
              # Query description: Find all edges of type ldcOnt:Government.Vote_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709716|LDC2019E44:80000046
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709716|LDC2019E44:80000046" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Vote_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709716|LDC2019E44:80000046"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0113">
    <subject> ?subject </subject>
    <predicate> Government.Vote.CastVote_Place </predicate>
    <object> LDC2019E44:702657|LDC2019E44:80000058 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0113
              # Query description: Find all edges of type ldcOnt:Government.Vote.CastVote_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:702657|LDC2019E44:80000058
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:702657|LDC2019E44:80000058" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Vote.CastVote_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:702657|LDC2019E44:80000058"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0114">
    <subject> ?subject </subject>
    <predicate> Government.Vote_Place </predicate>
    <object> LDC2019E44:702657|LDC2019E44:80000058 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0114
              # Query description: Find all edges of type ldcOnt:Government.Vote_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:702657|LDC2019E44:80000058
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:702657|LDC2019E44:80000058" AS ?olink_target_q)
                  BIND (ldcOnt:Government.Vote_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:702657|LDC2019E44:80000058"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0115">
    <subject> ?subject </subject>
    <predicate> Contact.MediaStatement.Broadcast_Place </predicate>
    <object> LDC2019E44:709716|LDC2019E44:80000046 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0115
              # Query description: Find all edges of type ldcOnt:Contact.MediaStatement.Broadcast_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709716|LDC2019E44:80000046
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709716|LDC2019E44:80000046" AS ?olink_target_q)
                  BIND (ldcOnt:Contact.MediaStatement.Broadcast_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709716|LDC2019E44:80000046"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0116">
    <subject> ?subject </subject>
    <predicate> Contact.MediaStatement_Place </predicate>
    <object> LDC2019E44:709716|LDC2019E44:80000046 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0116
              # Query description: Find all edges of type ldcOnt:Contact.MediaStatement_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:709716|LDC2019E44:80000046
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:709716|LDC2019E44:80000046" AS ?olink_target_q)
                  BIND (ldcOnt:Contact.MediaStatement_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:709716|LDC2019E44:80000046"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0117">
    <subject> ?subject </subject>
    <predicate> Contact.MediaStatement.Broadcast_Place </predicate>
    <object> LDC2019E44:702657|LDC2019E44:80000058 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0117
              # Query description: Find all edges of type ldcOnt:Contact.MediaStatement.Broadcast_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:702657|LDC2019E44:80000058
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:702657|LDC2019E44:80000058" AS ?olink_target_q)
                  BIND (ldcOnt:Contact.MediaStatement.Broadcast_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:702657|LDC2019E44:80000058"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA2_GR_2019_0118">
    <subject> ?subject </subject>
    <predicate> Contact.MediaStatement_Place </predicate>
    <object> LDC2019E44:702657|LDC2019E44:80000058 </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA2_GR_2019_0118
              # Query description: Find all edges of type ldcOnt:Contact.MediaStatement_Place such that the object
              #                    of the edge is linked to reference KB node LDC2019E44:702657|LDC2019E44:80000058
              #
              # Edge: consists of a Subject (cluster) Id, a Predicate label and an Object (cluster) Id. Subject is an event
              # KE (cluster) or relation KE (cluster). Object is an entity KE (cluster), relation KE (cluster), or event KE (cluster).
              # An edge that is returned in response to a TA2 graph query will only have entity KEs as the Object (because the 
              # TA2 graph query will bind the Object to a specific entity in the evaluation reference KB).
              #
              # Aggregate edge justification confidence (AEJC) is used to rank triples to determine which will be pooled and assessed by LDC.
              # AEJC is also used to rank edges whose triples will be assessed by LDC.
              # AEJC is also used to compute subject importance, to determine which relation and event frames get assessed by LDC.
              #
              # By default, NIST will compute aggregate edge justification confidence (AEJC) for TA2 as the product of:
              #        ?orfkblink_cv # confidence of linking the object to the query reference KB ID
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT
                     ?docid           # sourceDocument
                     ?edge_type_q     # edge type in the query
                     ?edge_type       # edge type in response matching the edge type in query
                     ?olink_target_q  # reference KB node given in query
                     ?olink_target    # reference KB node linked to the object of the edge matching ?olink_target_q
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span         # CompoundJustification span(s) for argument assertion
                     ?orfkblink_cv    # confidence of linking the object to the query reference KB ID
                     ?oinf_j_cv       # confidence of object informativeJustification
                     ?obcm_cv         # cluster membership confidence of the object
                     ?edge_cj_cv      # confidence of a compound justification for the argument assertion
                     ?sbcm_cv         # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND ("LDC2019E44:702657|LDC2019E44:80000058" AS ?olink_target_q)
                  BIND (ldcOnt:Contact.MediaStatement_Place AS ?edge_type_q)
              
                  # Find ?objectmo linked to "LDC2019E44:702657|LDC2019E44:80000058"
                  ?objectmo             a                             aida:Entity .
                  ?objectmo             aida:link                     ?objectmo_rfkbl .
              
                  ?objectmo_rfkbl       a                             aida:LinkAssertion .
                  ?objectmo_rfkbl       aida:linkTarget               ?olink_target .
                  ?objectmo_rfkbl       aida:confidence               ?orfkblink_confidence .
                  ?orfkblink_confidence aida:confidenceValue          ?orfkblink_cv .
                  
                  FILTER(cfn:memberOf(str(?olink_target), str(?olink_target_q))) .
              
                  # Get the object informativeJustification
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  ?subjectmo            aida:informativeJustification ?sinf_justification .
                  ?sinf_justification   aida:sourceDocument           ?docid .
                  ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(?cj) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?cj .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb  .
                         ?obb                aida:boundingBoxUpperLeftX  ?oulx .
                         ?obb                aida:boundingBoxUpperLeftY  ?ouly .
                         ?obb                aida:boundingBoxLowerRightX ?olrx .
                         ?obb                aida:boundingBoxLowerRightY ?olry
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( IF( BOUND(?oulx), ?oulx, "__NULL__") AS ?_oulx) .
                  BIND( IF( BOUND(?ouly), ?ouly, "__NULL__") AS ?_ouly) .
                  BIND( IF( BOUND(?olrx), ?olrx, "__NULL__") AS ?_olrx) .
                  BIND( IF( BOUND(?olry), ?olry, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  OPTIONAL {
                         ?sinf_justification a                           aida:TextJustification .
                         ?sinf_justification aida:startOffset            ?sso .
                         ?sinf_justification aida:endOffsetInclusive     ?seo
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ImageJustification .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:KeyFrameVideoJustification .
                         ?sinf_justification aida:keyFrame               ?skfid .
                         ?sinf_justification aida:boundingBox            ?sbb  .
                         ?sbb                aida:boundingBoxUpperLeftX  ?sulx .
                         ?sbb                aida:boundingBoxUpperLeftY  ?suly .
                         ?sbb                aida:boundingBoxLowerRightX ?slrx .
                         ?sbb                aida:boundingBoxLowerRightY ?slry
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:ShotVideoJustification .
                         ?sinf_justification aida:shot                   ?ssid
                  }
                  OPTIONAL {
                         ?sinf_justification a                           aida:AudioJustification .
                         ?sinf_justification aida:startTimestamp         ?sst .
                         ?sinf_justification aida:endTimestamp           ?set
                  }
              
                  BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  BIND( IF( BOUND(?sulx), ?sulx, "__NULL__") AS ?_sulx) .
                  BIND( IF( BOUND(?suly), ?suly, "__NULL__") AS ?_suly) .
                  BIND( IF( BOUND(?slrx), ?slrx, "__NULL__") AS ?_slrx) .
                  BIND( IF( BOUND(?slry), ?slry, "__NULL__") AS ?_slry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb  .
                         ?ej1bb                aida:boundingBoxUpperLeftX  ?ej1ulx .
                         ?ej1bb                aida:boundingBoxUpperLeftY  ?ej1uly .
                         ?ej1bb                aida:boundingBoxLowerRightX ?ej1lrx .
                         ?ej1bb                aida:boundingBoxLowerRightY ?ej1lry
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( IF( BOUND(?ej1ulx), ?ej1ulx, "__NULL__") AS ?_ej1ulx) .
                  BIND( IF( BOUND(?ej1uly), ?ej1uly, "__NULL__") AS ?_ej1uly) .
                  BIND( IF( BOUND(?ej1lrx), ?ej1lrx, "__NULL__") AS ?_ej1lrx) .
                  BIND( IF( BOUND(?ej1lry), ?ej1lry, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb  .
                         ?ej2bb                aida:boundingBoxUpperLeftX  ?ej2ulx .
                         ?ej2bb                aida:boundingBoxUpperLeftY  ?ej2uly .
                         ?ej2bb                aida:boundingBoxLowerRightX ?ej2lrx .
                         ?ej2bb                aida:boundingBoxLowerRightY ?ej2lry
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( IF( BOUND(?ej2ulx), ?ej2ulx, "__NULL__") AS ?_ej2ulx) .
                  BIND( IF( BOUND(?ej2uly), ?ej2uly, "__NULL__") AS ?_ej2uly) .
                  BIND( IF( BOUND(?ej2lrx), ?ej2lrx, "__NULL__") AS ?_ej2lrx) .
                  BIND( IF( BOUND(?ej2lry), ?ej2lry, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
</graph_queries>
