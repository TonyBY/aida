
PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

# Query: AIDA_TA1_CL_2019_0025
# Query description: Find all informative mentions of type ORG.PoliticalOrganization.Party
# Aggregate confidence of ?cluster is product of
#       ?t_cv       # confidenceValue of asserting ?member being of ?type
#       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
#       ?j_cv       # confidenceValue of informativeJustification

SELECT DISTINCT
  ?docid      # sourceDocument
  ?query_type # query type
  ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
  ?type       # matching ?type
  ?infj_span  # informativeJustification span
  ?t_cv       # confidenceValue of asserting ?member being of ?type
  ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
  ?j_cv       # confidenceValue of informativeJustification

WHERE {

    BIND(ldcOnt:ORG.PoliticalOrganization.Party AS ?query_type)

    ?cluster              aida:informativeJustification ?inf_justification .

    ?statement1           a                             rdf:Statement .
    ?statement1           rdf:object                    ?type .
    ?statement1           rdf:predicate                 rdf:type .
    ?statement1           rdf:subject                   ?member .
    # ?statement1           aida:justifiedBy              ?inf_justification .
    ?statement1           aida:confidence               ?t_confidence .
    ?t_confidence         aida:confidenceValue          ?t_cv .

    FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

    ?statement2           a                             aida:ClusterMembership .
    ?statement2           aida:cluster                  ?cluster .
    ?statement2           aida:clusterMember            ?member .
    ?statement2           aida:confidence               ?cm_confidence .
    ?cm_confidence        aida:confidenceValue          ?cm_cv .

    ?inf_justification    aida:source          ?doceid .
    ?inf_justification    aida:sourceDocument  ?docid .
    ?inf_justification    aida:confidence      ?j_confidence .
    ?j_confidence         aida:confidenceValue ?j_cv .

    OPTIONAL {
           ?inf_justification a                           aida:TextJustification .
           ?inf_justification aida:startOffset            ?so .
           ?inf_justification aida:endOffsetInclusive     ?eo
    }
    OPTIONAL {
           ?inf_justification a                           aida:ImageJustification .
           ?inf_justification aida:boundingBox            ?bb  .
           ?bb                aida:boundingBoxUpperLeftX  ?ulx .
           ?bb                aida:boundingBoxUpperLeftY  ?uly .
           ?bb                aida:boundingBoxLowerRightX ?lrx .
           ?bb                aida:boundingBoxLowerRightY ?lry
    }
    OPTIONAL {
           ?inf_justification a                           aida:KeyFrameVideoJustification .
           ?inf_justification aida:keyFrame               ?kfid .
           ?inf_justification aida:boundingBox            ?bb  .
           ?bb                aida:boundingBoxUpperLeftX  ?ulx .
           ?bb                aida:boundingBoxUpperLeftY  ?uly .
           ?bb                aida:boundingBoxLowerRightX ?lrx .
           ?bb                aida:boundingBoxLowerRightY ?lry
    }
    OPTIONAL {
           ?inf_justification a                           aida:ShotVideoJustification .
           ?inf_justification aida:shot                   ?sid
    }
    OPTIONAL {
           ?inf_justification a                           aida:AudioJustification .
           ?inf_justification aida:startTimestamp         ?st .
           ?inf_justification aida:endTimestamp           ?et
    }

    BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
    BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
    BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
    BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
    BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
    BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
    BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
    BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
    BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
    BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

    BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
}
	