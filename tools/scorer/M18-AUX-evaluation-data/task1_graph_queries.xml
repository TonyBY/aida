<?xml version="1.0" encoding="UTF-8"?>
<graph_queries>
  <graph_query id="AIDA_TA1_GR_2019_0001">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Target </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0001
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Target
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack_Target AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0002">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0002
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0003">
    <subject> ?subject </subject>
    <predicate> Life.Die.DeathCausedByViolentEvents_Victim </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0003
              # Query description: Find all edges of type ldcOnt:Life.Die.DeathCausedByViolentEvents_Victim
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Life.Die.DeathCausedByViolentEvents_Victim AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0004">
    <subject> ?subject </subject>
    <predicate> Life.Die_Victim </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0004
              # Query description: Find all edges of type ldcOnt:Life.Die_Victim
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Life.Die_Victim AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0005">
    <subject> ?subject </subject>
    <predicate> Life.Die.DeathCausedByViolentEvents_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0005
              # Query description: Find all edges of type ldcOnt:Life.Die.DeathCausedByViolentEvents_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Life.Die.DeathCausedByViolentEvents_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0006">
    <subject> ?subject </subject>
    <predicate> Life.Die_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0006
              # Query description: Find all edges of type ldcOnt:Life.Die_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Life.Die_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0007">
    <subject> ?subject </subject>
    <predicate> ResponsibilityBlame.ClaimResponsibility.ClaimResponsibility_EntityResponsible </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0007
              # Query description: Find all edges of type ldcOnt:ResponsibilityBlame.ClaimResponsibility.ClaimResponsibility_EntityResponsible
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:ResponsibilityBlame.ClaimResponsibility.ClaimResponsibility_EntityResponsible AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0008">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0008
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_Organization AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0009">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_EntityOrFiller </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0009
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_EntityOrFiller
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation_EntityOrFiller AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0010">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0010
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Organization AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0011">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Nationality </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0011
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Nationality
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.OrganizationPoliticalReligiousAffiliation.NationalityCitizen_Nationality AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0012">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.FirearmAttack_Target </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0012
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.FirearmAttack_Target
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.FirearmAttack_Target AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0013">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.FirearmAttack_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0013
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.FirearmAttack_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.FirearmAttack_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0014">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.MemberOriginReligionEthnicity_Person </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0014
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_Person
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_Person AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0015">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.MemberOriginReligionEthnicity_EntityOrFiller </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0015
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_EntityOrFiller
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity_EntityOrFiller AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0016">
    <subject> ?subject </subject>
    <predicate> PersonalSocial.Role.ProfessionalRole_Person </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0016
              # Query description: Find all edges of type ldcOnt:PersonalSocial.Role.ProfessionalRole_Person
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:PersonalSocial.Role.ProfessionalRole_Person AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0017">
    <subject> ?subject </subject>
    <predicate> PersonalSocial.Role_Person </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0017
              # Query description: Find all edges of type ldcOnt:PersonalSocial.Role_Person
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:PersonalSocial.Role_Person AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0018">
    <subject> ?subject </subject>
    <predicate> PersonalSocial.Role.ProfessionalRole_JobRole </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0018
              # Query description: Find all edges of type ldcOnt:PersonalSocial.Role.ProfessionalRole_JobRole
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:PersonalSocial.Role.ProfessionalRole_JobRole AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0019">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.Sponsorship.AdvisePlanOrganize_Sponsor </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0019
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.Sponsorship.AdvisePlanOrganize_Sponsor
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.Sponsorship.AdvisePlanOrganize_Sponsor AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0020">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.Sponsorship_Sponsor </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0020
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.Sponsorship_Sponsor
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.Sponsorship_Sponsor AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0021">
    <subject> ?subject </subject>
    <predicate> Physical.LocatedNear_EntityOrFiller </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0021
              # Query description: Find all edges of type ldcOnt:Physical.LocatedNear_EntityOrFiller
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Physical.LocatedNear_EntityOrFiller AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0022">
    <subject> ?subject </subject>
    <predicate> Physical.LocatedNear_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0022
              # Query description: Find all edges of type ldcOnt:Physical.LocatedNear_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Physical.LocatedNear_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0023">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.Hanging_Target </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0023
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.Hanging_Target
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.Hanging_Target AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0024">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.Hanging_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0024
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.Hanging_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.Hanging_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0025">
    <subject> ?subject </subject>
    <predicate> Life.Die.DeathCausedByViolentEvents_Killer </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0025
              # Query description: Find all edges of type ldcOnt:Life.Die.DeathCausedByViolentEvents_Killer
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Life.Die.DeathCausedByViolentEvents_Killer AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0026">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.FirearmAttack_Attacker </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0026
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.FirearmAttack_Attacker
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.FirearmAttack_Attacker AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0027">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Attacker </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0027
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Attacker
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack_Attacker AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0028">
    <subject> ?subject </subject>
    <predicate> ResponsibilityBlame.AssignBlame.AssignBlame_EntityResponsible </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0028
              # Query description: Find all edges of type ldcOnt:ResponsibilityBlame.AssignBlame.AssignBlame_EntityResponsible
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:ResponsibilityBlame.AssignBlame.AssignBlame_EntityResponsible AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0029">
    <subject> ?subject </subject>
    <predicate> Life.Die.NonviolentDeath_Victim </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0029
              # Query description: Find all edges of type ldcOnt:Life.Die.NonviolentDeath_Victim
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Life.Die.NonviolentDeath_Victim AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0030">
    <subject> ?subject </subject>
    <predicate> Life.Die.NonviolentDeath_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0030
              # Query description: Find all edges of type ldcOnt:Life.Die.NonviolentDeath_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Life.Die.NonviolentDeath_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0031">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.Hanging_Attacker </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0031
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.Hanging_Attacker
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.Hanging_Attacker AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0032">
    <subject> ?subject </subject>
    <predicate> OrganizationAffiliation.EmploymentMembership_EmployeeMember </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0032
              # Query description: Find all edges of type ldcOnt:OrganizationAffiliation.EmploymentMembership_EmployeeMember
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:OrganizationAffiliation.EmploymentMembership_EmployeeMember AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0033">
    <subject> ?subject </subject>
    <predicate> OrganizationAffiliation.EmploymentMembership_PlaceOfEmploymentMembership </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0033
              # Query description: Find all edges of type ldcOnt:OrganizationAffiliation.EmploymentMembership_PlaceOfEmploymentMembership
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:OrganizationAffiliation.EmploymentMembership_PlaceOfEmploymentMembership AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0034">
    <subject> ?subject </subject>
    <predicate> Conflict.Demonstrate.MarchProtestPoliticalGathering_Demonstrator </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0034
              # Query description: Find all edges of type ldcOnt:Conflict.Demonstrate.MarchProtestPoliticalGathering_Demonstrator
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Demonstrate.MarchProtestPoliticalGathering_Demonstrator AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0035">
    <subject> ?subject </subject>
    <predicate> Conflict.Demonstrate_Demonstrator </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0035
              # Query description: Find all edges of type ldcOnt:Conflict.Demonstrate_Demonstrator
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Demonstrate_Demonstrator AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0036">
    <subject> ?subject </subject>
    <predicate> Conflict.Demonstrate.MarchProtestPoliticalGathering_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0036
              # Query description: Find all edges of type ldcOnt:Conflict.Demonstrate.MarchProtestPoliticalGathering_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Demonstrate.MarchProtestPoliticalGathering_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0037">
    <subject> ?subject </subject>
    <predicate> Conflict.Demonstrate_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0037
              # Query description: Find all edges of type ldcOnt:Conflict.Demonstrate_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Demonstrate_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0038">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Citizen </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0038
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Citizen
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Citizen AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0039">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0039
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.MemberOriginReligionEthnicity.NationalityCitizen_Nationality AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0040">
    <subject> ?subject </subject>
    <predicate> OrganizationAffiliation.EmploymentMembership.Membership_Member </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0040
              # Query description: Find all edges of type ldcOnt:OrganizationAffiliation.EmploymentMembership.Membership_Member
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:OrganizationAffiliation.EmploymentMembership.Membership_Member AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0041">
    <subject> ?subject </subject>
    <predicate> OrganizationAffiliation.EmploymentMembership.Membership_PlaceOfMembership </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0041
              # Query description: Find all edges of type ldcOnt:OrganizationAffiliation.EmploymentMembership.Membership_PlaceOfMembership
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:OrganizationAffiliation.EmploymentMembership.Membership_PlaceOfMembership AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0042">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.SetFire_Target </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0042
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.SetFire_Target
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.SetFire_Target AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0043">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.SetFire_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0043
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.SetFire_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.SetFire_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0044">
    <subject> ?subject </subject>
    <predicate> Measurement.Size.Count_Measurement </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0044
              # Query description: Find all edges of type ldcOnt:Measurement.Size.Count_Measurement
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Measurement.Size.Count_Measurement AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0045">
    <subject> ?subject </subject>
    <predicate> Measurement.Size_Measurement </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0045
              # Query description: Find all edges of type ldcOnt:Measurement.Size_Measurement
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Measurement.Size_Measurement AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0046">
    <subject> ?subject </subject>
    <predicate> Measurement.Size.Count_EntityOrFiller </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0046
              # Query description: Find all edges of type ldcOnt:Measurement.Size.Count_EntityOrFiller
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Measurement.Size.Count_EntityOrFiller AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0047">
    <subject> ?subject </subject>
    <predicate> Measurement.Size_EntityOrFiller </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0047
              # Query description: Find all edges of type ldcOnt:Measurement.Size_EntityOrFiller
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Measurement.Size_EntityOrFiller AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0048">
    <subject> ?subject </subject>
    <predicate> PartWhole.Subsidiary_Subsidiary </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0048
              # Query description: Find all edges of type ldcOnt:PartWhole.Subsidiary_Subsidiary
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:PartWhole.Subsidiary_Subsidiary AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0049">
    <subject> ?subject </subject>
    <predicate> PartWhole.Subsidiary_Parent </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0049
              # Query description: Find all edges of type ldcOnt:PartWhole.Subsidiary_Parent
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:PartWhole.Subsidiary_Parent AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0050">
    <subject> ?subject </subject>
    <predicate> OrganizationAffiliation.EmploymentMembership.Employment_Employee </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0050
              # Query description: Find all edges of type ldcOnt:OrganizationAffiliation.EmploymentMembership.Employment_Employee
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:OrganizationAffiliation.EmploymentMembership.Employment_Employee AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0051">
    <subject> ?subject </subject>
    <predicate> OrganizationAffiliation.EmploymentMembership.Employment_PlaceOfEmployment </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0051
              # Query description: Find all edges of type ldcOnt:OrganizationAffiliation.EmploymentMembership.Employment_PlaceOfEmployment
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:OrganizationAffiliation.EmploymentMembership.Employment_PlaceOfEmployment AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0052">
    <subject> ?subject </subject>
    <predicate> Contact.CommandOrder_Communicator </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0052
              # Query description: Find all edges of type ldcOnt:Contact.CommandOrder_Communicator
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Contact.CommandOrder_Communicator AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0053">
    <subject> ?subject </subject>
    <predicate> Contact.CommandOrder_Recipient </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0053
              # Query description: Find all edges of type ldcOnt:Contact.CommandOrder_Recipient
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Contact.CommandOrder_Recipient AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0054">
    <subject> ?subject </subject>
    <predicate> Contact.CommandOrder_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0054
              # Query description: Find all edges of type ldcOnt:Contact.CommandOrder_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Contact.CommandOrder_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0055">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation.OwnershipPossession_Artifact </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0055
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation.OwnershipPossession_Artifact
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation.OwnershipPossession_Artifact AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0056">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation.OwnershipPossession_Owner </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0056
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation.OwnershipPossession_Owner
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation.OwnershipPossession_Owner AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0057">
    <subject> ?subject </subject>
    <predicate> Information.Color.Color_EntityOrFiller </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0057
              # Query description: Find all edges of type ldcOnt:Information.Color.Color_EntityOrFiller
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Information.Color.Color_EntityOrFiller AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0058">
    <subject> ?subject </subject>
    <predicate> Information.Color.Color_Color </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0058
              # Query description: Find all edges of type ldcOnt:Information.Color.Color_Color
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Information.Color.Color_Color AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0059">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation_Artifact </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0059
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation_Artifact
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation_Artifact AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0060">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation_EntityOrFiller </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0060
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation_EntityOrFiller
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation_EntityOrFiller AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0061">
    <subject> ?subject </subject>
    <predicate> Movement.TransportPerson.SelfMotion_Transporter </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0061
              # Query description: Find all edges of type ldcOnt:Movement.TransportPerson.SelfMotion_Transporter
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Movement.TransportPerson.SelfMotion_Transporter AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0062">
    <subject> ?subject </subject>
    <predicate> Movement.TransportPerson.SelfMotion_Destination </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0062
              # Query description: Find all edges of type ldcOnt:Movement.TransportPerson.SelfMotion_Destination
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Movement.TransportPerson.SelfMotion_Destination AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0063">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.Bombing_Attacker </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0063
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.Bombing_Attacker
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.Bombing_Attacker AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0064">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.Bombing_Target </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0064
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.Bombing_Target
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.Bombing_Target AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0065">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.Bombing_Instrument </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0065
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.Bombing_Instrument
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.Bombing_Instrument AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0066">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack_Instrument </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0066
              # Query description: Find all edges of type ldcOnt:Conflict.Attack_Instrument
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack_Instrument AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0067">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.Bombing_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0067
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.Bombing_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.Bombing_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0068">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.SetFire_Attacker </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0068
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.SetFire_Attacker
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.SetFire_Attacker AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0069">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.SetFire_Instrument </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0069
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.SetFire_Instrument
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.SetFire_Instrument AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0070">
    <subject> ?subject </subject>
    <predicate> Contact.ThreatenCoerce.Meet_Communicator </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0070
              # Query description: Find all edges of type ldcOnt:Contact.ThreatenCoerce.Meet_Communicator
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Contact.ThreatenCoerce.Meet_Communicator AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0071">
    <subject> ?subject </subject>
    <predicate> Contact.ThreatenCoerce_Communicator </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0071
              # Query description: Find all edges of type ldcOnt:Contact.ThreatenCoerce_Communicator
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Contact.ThreatenCoerce_Communicator AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0072">
    <subject> ?subject </subject>
    <predicate> Contact.ThreatenCoerce.Meet_Recipient </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0072
              # Query description: Find all edges of type ldcOnt:Contact.ThreatenCoerce.Meet_Recipient
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Contact.ThreatenCoerce.Meet_Recipient AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0073">
    <subject> ?subject </subject>
    <predicate> Contact.ThreatenCoerce_Recipient </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0073
              # Query description: Find all edges of type ldcOnt:Contact.ThreatenCoerce_Recipient
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Contact.ThreatenCoerce_Recipient AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0074">
    <subject> ?subject </subject>
    <predicate> Contact.ThreatenCoerce.Meet_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0074
              # Query description: Find all edges of type ldcOnt:Contact.ThreatenCoerce.Meet_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Contact.ThreatenCoerce.Meet_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0075">
    <subject> ?subject </subject>
    <predicate> Contact.ThreatenCoerce_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0075
              # Query description: Find all edges of type ldcOnt:Contact.ThreatenCoerce_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Contact.ThreatenCoerce_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0076">
    <subject> ?subject </subject>
    <predicate> ArtifactExistence.DamageDestroy.Destroy_Destroyer </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0076
              # Query description: Find all edges of type ldcOnt:ArtifactExistence.DamageDestroy.Destroy_Destroyer
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:ArtifactExistence.DamageDestroy.Destroy_Destroyer AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0077">
    <subject> ?subject </subject>
    <predicate> ArtifactExistence.DamageDestroy.Destroy_Artifact </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0077
              # Query description: Find all edges of type ldcOnt:ArtifactExistence.DamageDestroy.Destroy_Artifact
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:ArtifactExistence.DamageDestroy.Destroy_Artifact AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0078">
    <subject> ?subject </subject>
    <predicate> ArtifactExistence.DamageDestroy_Artifact </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0078
              # Query description: Find all edges of type ldcOnt:ArtifactExistence.DamageDestroy_Artifact
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:ArtifactExistence.DamageDestroy_Artifact AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0079">
    <subject> ?subject </subject>
    <predicate> ArtifactExistence.DamageDestroy.Destroy_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0079
              # Query description: Find all edges of type ldcOnt:ArtifactExistence.DamageDestroy.Destroy_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:ArtifactExistence.DamageDestroy.Destroy_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0080">
    <subject> ?subject </subject>
    <predicate> ArtifactExistence.DamageDestroy_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0080
              # Query description: Find all edges of type ldcOnt:ArtifactExistence.DamageDestroy_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:ArtifactExistence.DamageDestroy_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0081">
    <subject> ?subject </subject>
    <predicate> Movement.TransportPerson.SelfMotion_Origin </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0081
              # Query description: Find all edges of type ldcOnt:Movement.TransportPerson.SelfMotion_Origin
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Movement.TransportPerson.SelfMotion_Origin AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0082">
    <subject> ?subject </subject>
    <predicate> Movement.TransportPerson_Origin </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0082
              # Query description: Find all edges of type ldcOnt:Movement.TransportPerson_Origin
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Movement.TransportPerson_Origin AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0083">
    <subject> ?subject </subject>
    <predicate> Movement.TransportPerson.PreventExit_Preventer </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0083
              # Query description: Find all edges of type ldcOnt:Movement.TransportPerson.PreventExit_Preventer
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Movement.TransportPerson.PreventExit_Preventer AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0084">
    <subject> ?subject </subject>
    <predicate> Movement.TransportPerson.PreventExit_Passenger </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0084
              # Query description: Find all edges of type ldcOnt:Movement.TransportPerson.PreventExit_Passenger
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Movement.TransportPerson.PreventExit_Passenger AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0085">
    <subject> ?subject </subject>
    <predicate> Movement.TransportPerson.PreventExit_Origin </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0085
              # Query description: Find all edges of type ldcOnt:Movement.TransportPerson.PreventExit_Origin
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Movement.TransportPerson.PreventExit_Origin AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0086">
    <subject> ?subject </subject>
    <predicate> Movement.TransportPerson.PreventExit_Destination </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0086
              # Query description: Find all edges of type ldcOnt:Movement.TransportPerson.PreventExit_Destination
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Movement.TransportPerson.PreventExit_Destination AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0087">
    <subject> ?subject </subject>
    <predicate> Contact.Collaborate_Participant </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0087
              # Query description: Find all edges of type ldcOnt:Contact.Collaborate_Participant
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Contact.Collaborate_Participant AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0088">
    <subject> ?subject </subject>
    <predicate> Movement.TransportPerson.BringCarryUnload_Passenger </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0088
              # Query description: Find all edges of type ldcOnt:Movement.TransportPerson.BringCarryUnload_Passenger
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Movement.TransportPerson.BringCarryUnload_Passenger AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0089">
    <subject> ?subject </subject>
    <predicate> Movement.TransportPerson.BringCarryUnload_Vehicle </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0089
              # Query description: Find all edges of type ldcOnt:Movement.TransportPerson.BringCarryUnload_Vehicle
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Movement.TransportPerson.BringCarryUnload_Vehicle AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0090">
    <subject> ?subject </subject>
    <predicate> Movement.TransportPerson.BringCarryUnload_Destination </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0090
              # Query description: Find all edges of type ldcOnt:Movement.TransportPerson.BringCarryUnload_Destination
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Movement.TransportPerson.BringCarryUnload_Destination AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0091">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation.ControlTerritory_Territory </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0091
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation.ControlTerritory_Territory
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation.ControlTerritory_Territory AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0092">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation.ControlTerritory_Controller </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0092
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation.ControlTerritory_Controller
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.ArtifactPoliticalOrganizationReligiousAffiliation.ControlTerritory_Controller AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0093">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.AirstrikeMissileStrike_Attacker </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0093
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.AirstrikeMissileStrike_Attacker
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.AirstrikeMissileStrike_Attacker AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0094">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.AirstrikeMissileStrike_Target </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0094
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.AirstrikeMissileStrike_Target
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.AirstrikeMissileStrike_Target AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0095">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.AirstrikeMissileStrike_Instrument </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0095
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.AirstrikeMissileStrike_Instrument
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.AirstrikeMissileStrike_Instrument AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0096">
    <subject> ?subject </subject>
    <predicate> Conflict.Attack.AirstrikeMissileStrike_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0096
              # Query description: Find all edges of type ldcOnt:Conflict.Attack.AirstrikeMissileStrike_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Conflict.Attack.AirstrikeMissileStrike_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0097">
    <subject> ?subject </subject>
    <predicate> Information.Make.Make_EntityOrFiller </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0097
              # Query description: Find all edges of type ldcOnt:Information.Make.Make_EntityOrFiller
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Information.Make.Make_EntityOrFiller AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0098">
    <subject> ?subject </subject>
    <predicate> Information.Make.Make_Brand </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0098
              # Query description: Find all edges of type ldcOnt:Information.Make.Make_Brand
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Information.Make.Make_Brand AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0099">
    <subject> ?subject </subject>
    <predicate> Transaction.Transaction.TransferControl_Giver </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0099
              # Query description: Find all edges of type ldcOnt:Transaction.Transaction.TransferControl_Giver
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Transaction.Transaction.TransferControl_Giver AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0100">
    <subject> ?subject </subject>
    <predicate> Transaction.Transaction.TransferControl_Recipient </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0100
              # Query description: Find all edges of type ldcOnt:Transaction.Transaction.TransferControl_Recipient
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Transaction.Transaction.TransferControl_Recipient AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0101">
    <subject> ?subject </subject>
    <predicate> Transaction.Transaction.TransferControl_TerritoryOrFacility </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0101
              # Query description: Find all edges of type ldcOnt:Transaction.Transaction.TransferControl_TerritoryOrFacility
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Transaction.Transaction.TransferControl_TerritoryOrFacility AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0102">
    <subject> ?subject </subject>
    <predicate> Transaction.Transaction.TransferControl_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0102
              # Query description: Find all edges of type ldcOnt:Transaction.Transaction.TransferControl_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Transaction.Transaction.TransferControl_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0103">
    <subject> ?subject </subject>
    <predicate> Transaction.Transaction_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0103
              # Query description: Find all edges of type ldcOnt:Transaction.Transaction_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Transaction.Transaction_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0104">
    <subject> ?subject </subject>
    <predicate> Transaction.TransferOwnership_Recipient </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0104
              # Query description: Find all edges of type ldcOnt:Transaction.TransferOwnership_Recipient
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Transaction.TransferOwnership_Recipient AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0105">
    <subject> ?subject </subject>
    <predicate> Transaction.TransferOwnership_Artifact </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0105
              # Query description: Find all edges of type ldcOnt:Transaction.TransferOwnership_Artifact
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Transaction.TransferOwnership_Artifact AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0106">
    <subject> ?subject </subject>
    <predicate> Transaction.TransferOwnership_Place </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0106
              # Query description: Find all edges of type ldcOnt:Transaction.TransferOwnership_Place
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:Transaction.TransferOwnership_Place AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0107">
    <subject> ?subject </subject>
    <predicate> ResponsibilityBlame.ClaimResponsibility.ClaimResponsibility_Event </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0107
              # Query description: Find all edges of type ldcOnt:ResponsibilityBlame.ClaimResponsibility.ClaimResponsibility_Event
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:ResponsibilityBlame.ClaimResponsibility.ClaimResponsibility_Event AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0108">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.Sponsorship.AdvisePlanOrganize_ActorOrEvent </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0108
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.Sponsorship.AdvisePlanOrganize_ActorOrEvent
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.Sponsorship.AdvisePlanOrganize_ActorOrEvent AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0109">
    <subject> ?subject </subject>
    <predicate> GeneralAffiliation.Sponsorship_ActorOrEvent </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0109
              # Query description: Find all edges of type ldcOnt:GeneralAffiliation.Sponsorship_ActorOrEvent
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:GeneralAffiliation.Sponsorship_ActorOrEvent AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
  <graph_query id="AIDA_TA1_GR_2019_0110">
    <subject> ?subject </subject>
    <predicate> ResponsibilityBlame.AssignBlame.AssignBlame_Event </predicate>
    <object> ?object </object>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
              
              # Query: AIDA_TA1_GR_2019_0110
              # Query description: Find all edges of type ldcOnt:ResponsibilityBlame.AssignBlame.AssignBlame_Event
              
              # By default, NIST will compute aggregate edge justification confidence (AEJC) as product of:
              #        ?oinf_j_cv    # confidence of object informativeJustification
              #        ?obcm_cv      # cluster membership confidence of the object
              #        ?edge_cj_cv   # confidence of a compound justification for the argument assertion
              #        ?sbcm_cv      # cluster membership confidence of the subject
              
              SELECT DISTINCT 
                     ?docid        # sourceDocument
                     ?edge_type_q  # edge type in the query
                     ?edge_type    # edge type in response matching the edge type in query
                     ?object_cluster  ?objectmo  ?oinf_j_span # object cluster, cluster member and its informativeJustification
                     ?subject_cluster ?subjectmo  # subject cluster, cluster member (its informativeJustification is not needed by LDC for assessment)
                     ?ej_span      # CompoundJustification span(s) for argument assertion
                     ?oinf_j_cv    # confidence of object informativeJustification
                     ?obcm_cv      # cluster membership confidence of the object
                     ?edge_cj_cv   # confidence of a compound justification for the argument assertion
                     ?sbcm_cv      # cluster membership confidence of the subject
              
              WHERE {
              
                  BIND (ldcOnt:ResponsibilityBlame.AssignBlame.AssignBlame_Event AS ?edge_type_q)
              
                  # Get the object informativeJustification
                  # ?objectmo           a                             aida:Entity .
                  ?objectmo             aida:informativeJustification ?oinf_justification .
                  ?oinf_justification   aida:sourceDocument           ?docid .
                  ?oinf_justification   aida:source                   ?oinf_j_doceid .
                  ?oinf_justification   aida:confidence               ?oinf_j_confidence .
                  ?oinf_j_confidence    aida:confidenceValue          ?oinf_j_cv .
              
                  # Get the object cluster and cluster membership confidence
                  ?statement1           a                             aida:ClusterMembership .
                  ?statement1           aida:cluster                  ?object_cluster .
                  ?statement1           aida:clusterMember            ?objectmo .
                  ?statement1           aida:confidence               ?objcm_confidence .
                  ?objcm_confidence     aida:confidenceValue          ?obcm_cv .
              
                  # Get the edge and it's justifications
                  ?statement2           rdf:object                    ?objectmo .
                  ?statement2           rdf:predicate                 ?edge_type .
                  ?statement2           rdf:subject                   ?subjectmo .
              
                  # The ?edge_type should be matching ?edge_type_q
                  FILTER(cfn:superTypeOf(str(?edge_type_q), str(?edge_type)))
              
                  ?statement2           aida:justifiedBy              ?compoundedge_just .
                  ?compoundedge_just    aida:confidence               ?edge_cj_confidence .
                  ?edge_cj_confidence   aida:confidenceValue          ?edge_cj_cv .
                  # The first contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification1 .
                  ?edge_justification1  aida:sourceDocument           ?docid .
                  ?edge_justification1  aida:source                   ?edgecj1_doceid .
                  # The second contained justification
                  ?compoundedge_just    aida:containedJustification   ?edge_justification2 .
                  ?edge_justification2  aida:sourceDocument           ?docid .
                  ?edge_justification2  aida:source                   ?edgecj2_doceid .
              
                  # Get the subject informativeJustification
                  # ?subjectmo            aida:informativeJustification ?sinf_justification .
                  # ?sinf_justification   aida:sourceDocument           ?docid .
                  # ?sinf_justification   aida:source                   ?sinf_j_doceid .
                  # ?sinf_justification   aida:confidence               ?sinf_j_confidence .
                  # ?sinf_j_confidence    aida:confidenceValue          ?sinf_j_cv .
              
                  # Get the subject cluster and cluster membership confidence
                  ?statement3           a                             aida:ClusterMembership .
                  ?statement3           aida:cluster                  ?subject_cluster .
                  ?statement3           aida:clusterMember            ?subjectmo .
                  ?statement3           aida:confidence               ?subjcm_confidence .
                  ?subjcm_confidence    aida:confidenceValue          ?sbcm_cv .
              
                  # Get the number of justifications (?edge_num_cjs) that are contained in
                  # the ?compoundedge_just
                  {
                     SELECT ?compoundedge_just (count(DISTINCT ?_c_j_span) as ?edge_num_cjs)
                     WHERE {
                         ?compoundedge_just aida:containedJustification ?c_justification .
                         ?c_justification   aida:sourceDocument         ?cj_docid .
                         ?c_justification   aida:source                 ?cj_doceid .

                         OPTIONAL {
                                ?c_justification a                           aida:TextJustification .
                                ?c_justification aida:startOffset            ?cj_so .
                                ?c_justification aida:endOffsetInclusive     ?cj_eo
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ImageJustification .
                                ?c_justification aida:boundingBox            ?cj_bb1  .
                                ?cj_bb1          aida:boundingBoxUpperLeftX  ?cj_ulx1 .
                                ?cj_bb1          aida:boundingBoxUpperLeftY  ?cj_uly1 .
                                ?cj_bb1          aida:boundingBoxLowerRightX ?cj_lrx1 .
                                ?cj_bb1          aida:boundingBoxLowerRightY ?cj_lry1
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:KeyFrameVideoJustification .
                                ?c_justification aida:keyFrame               ?cj_kfid .
                                ?c_justification aida:boundingBox            ?cj_bb2  .
                                ?cj_bb2          aida:boundingBoxUpperLeftX  ?cj_ulx2 .
                                ?cj_bb2          aida:boundingBoxUpperLeftY  ?cj_uly2 .
                                ?cj_bb2          aida:boundingBoxLowerRightX ?cj_lrx2 .
                                ?cj_bb2          aida:boundingBoxLowerRightY ?cj_lry2
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:ShotVideoJustification .
                                ?c_justification aida:shot                   ?cj_sid
                         }
                         OPTIONAL {
                                ?c_justification a                           aida:AudioJustification .
                                ?c_justification aida:startTimestamp         ?cj_st .
                                ?c_justification aida:endTimestamp           ?cj_et
                         }

                         BIND( IF( BOUND(?cj_sid), ?cj_sid, "__NULL__") AS ?_cj_sid) .
                         BIND( IF( BOUND(?cj_kfid), ?cj_kfid, "__NULL__") AS ?_cj_kfid) .
                         BIND( IF( BOUND(?cj_so), ?cj_so, "__NULL__") AS ?_cj_so) .
                         BIND( IF( BOUND(?cj_eo), ?cj_eo, "__NULL__") AS ?_cj_eo) .
                         BIND( IF( BOUND(?cj_st), ?cj_st, "__NULL__") AS ?_cj_st) .
                         BIND( IF( BOUND(?cj_et), ?cj_et, "__NULL__") AS ?_cj_et) .
                         BIND( COALESCE(?cj_ulx1, ?cj_ulx2, "__NULL__") AS ?_cj_ulx) .
                         BIND( COALESCE(?cj_uly1, ?cj_uly2, "__NULL__") AS ?_cj_uly) .
                         BIND( COALESCE(?cj_lrx1, ?cj_lrx2, "__NULL__") AS ?_cj_lrx) .
                         BIND( COALESCE(?cj_lry1, ?cj_lry2, "__NULL__") AS ?_cj_lry) .

                         BIND( cfn:getSpan(str(?cj_docid), str(?cj_doceid), str(?_cj_sid), str(?_cj_kfid), str(?_cj_so), str(?_cj_eo), str(?_cj_ulx), str(?_cj_uly), str(?_cj_lrx), str(?_cj_lry), str(?_cj_st), str(?_cj_et) ) AS ?_c_j_span ) .
                     }
                     GROUP BY ?compoundedge_just
                  }
              
                  # Get object's informative justification span
                  OPTIONAL {
                         ?oinf_justification a                           aida:TextJustification .
                         ?oinf_justification aida:startOffset            ?oso .
                         ?oinf_justification aida:endOffsetInclusive     ?oeo
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ImageJustification .
                         ?oinf_justification aida:boundingBox            ?obb1  .
                         ?obb1               aida:boundingBoxUpperLeftX  ?oulx1 .
                         ?obb1               aida:boundingBoxUpperLeftY  ?ouly1 .
                         ?obb1               aida:boundingBoxLowerRightX ?olrx1 .
                         ?obb1               aida:boundingBoxLowerRightY ?olry1
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:KeyFrameVideoJustification .
                         ?oinf_justification aida:keyFrame               ?okfid .
                         ?oinf_justification aida:boundingBox            ?obb2  .
                         ?obb2               aida:boundingBoxUpperLeftX  ?oulx2 .
                         ?obb2               aida:boundingBoxUpperLeftY  ?ouly2 .
                         ?obb2               aida:boundingBoxLowerRightX ?olrx2 .
                         ?obb2               aida:boundingBoxLowerRightY ?olry2
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:ShotVideoJustification .
                         ?oinf_justification aida:shot                   ?osid
                  }
                  OPTIONAL {
                         ?oinf_justification a                           aida:AudioJustification .
                         ?oinf_justification aida:startTimestamp         ?ost .
                         ?oinf_justification aida:endTimestamp           ?oet
                  }
              
                  BIND( IF( BOUND(?osid), ?osid, "__NULL__") AS ?_osid) .
                  BIND( IF( BOUND(?okfid), ?okfid, "__NULL__") AS ?_okfid) .
                  BIND( IF( BOUND(?oso), ?oso, "__NULL__") AS ?_oso) .
                  BIND( IF( BOUND(?oeo), ?oeo, "__NULL__") AS ?_oeo) .
                  BIND( IF( BOUND(?ost), ?ost, "__NULL__") AS ?_ost) .
                  BIND( IF( BOUND(?oet), ?oet, "__NULL__") AS ?_oet) .
                  BIND( COALESCE(?oulx1, ?oulx2, "__NULL__") AS ?_oulx) .
                  BIND( COALESCE(?ouly1, ?ouly2, "__NULL__") AS ?_ouly) .
                  BIND( COALESCE(?olrx1, ?olrx2, "__NULL__") AS ?_olrx) .
                  BIND( COALESCE(?olry1, ?olry2, "__NULL__") AS ?_olry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?oinf_j_doceid), str(?_osid), str(?_okfid), str(?_oso), str(?_oeo), str(?_oulx), str(?_ouly), str(?_olrx), str(?_olry), str(?_ost), str(?_oet) ) AS ?oinf_j_span ) .
              
                  # Get subject's informative justification span
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:TextJustification .
                  #       ?sinf_justification aida:startOffset            ?sso .
                  #       ?sinf_justification aida:endOffsetInclusive     ?seo
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ImageJustification .
                  #       ?sinf_justification aida:boundingBox            ?sbb1  .
                  #       ?sbb1               aida:boundingBoxUpperLeftX  ?sulx1 .
                  #       ?sbb1               aida:boundingBoxUpperLeftY  ?suly1 .
                  #       ?sbb1               aida:boundingBoxLowerRightX ?slrx1 .
                  #       ?sbb1               aida:boundingBoxLowerRightY ?slry1
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:KeyFrameVideoJustification .
                  #       ?sinf_justification aida:keyFrame               ?skfid .
                  #       ?sinf_justification aida:boundingBox            ?sbb2  .
                  #       ?sbb2               aida:boundingBoxUpperLeftX  ?sulx2 .
                  #       ?sbb2               aida:boundingBoxUpperLeftY  ?suly2 .
                  #       ?sbb2               aida:boundingBoxLowerRightX ?slrx2 .
                  #       ?sbb2               aida:boundingBoxLowerRightY ?slry2
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:ShotVideoJustification .
                  #       ?sinf_justification aida:shot                   ?ssid
                  # }
                  # OPTIONAL {
                  #       ?sinf_justification a                           aida:AudioJustification .
                  #       ?sinf_justification aida:startTimestamp         ?sst .
                  #       ?sinf_justification aida:endTimestamp           ?set
                  # }
              
                  # BIND( IF( BOUND(?ssid), ?ssid, "__NULL__") AS ?_ssid) .
                  # BIND( IF( BOUND(?skfid), ?skfid, "__NULL__") AS ?_skfid) .
                  # BIND( IF( BOUND(?sso), ?sso, "__NULL__") AS ?_sso) .
                  # BIND( IF( BOUND(?seo), ?seo, "__NULL__") AS ?_seo) .
                  # BIND( IF( BOUND(?sst), ?sst, "__NULL__") AS ?_sst) .
                  # BIND( IF( BOUND(?set), ?set, "__NULL__") AS ?_set) .
                  # BIND( COALESCE(?sulx1, ?sulx2, "__NULL__") AS ?_sulx) .
                  # BIND( COALESCE(?suly1, ?suly2, "__NULL__") AS ?_suly) .
                  # BIND( COALESCE(?slrx1, ?slrx2, "__NULL__") AS ?_slrx) .
                  # BIND( COALESCE(?slry1, ?slry2, "__NULL__") AS ?_slry) .
              
                  # BIND( cfn:getSpan(str(?docid), str(?sinf_j_doceid), str(?_ssid), str(?_skfid), str(?_sso), str(?_seo), str(?_sulx), str(?_suly), str(?_slrx), str(?_slry), str(?_sst), str(?_set) ) AS ?sinf_j_span ) .
              
                  # Get edge's justification span # 1
                  OPTIONAL {
                         ?edge_justification1 a                           aida:TextJustification .
                         ?edge_justification1 aida:startOffset            ?ej1so .
                         ?edge_justification1 aida:endOffsetInclusive     ?ej1eo
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ImageJustification .
                         ?edge_justification1 aida:boundingBox            ?ej1bb1  .
                         ?ej1bb1              aida:boundingBoxUpperLeftX  ?ej1ulx1 .
                         ?ej1bb1              aida:boundingBoxUpperLeftY  ?ej1uly1 .
                         ?ej1bb1              aida:boundingBoxLowerRightX ?ej1lrx1 .
                         ?ej1bb1              aida:boundingBoxLowerRightY ?ej1lry1
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification1 aida:keyFrame               ?ej1kfid .
                         ?edge_justification1 aida:boundingBox            ?ej1bb2  .
                         ?ej1bb2              aida:boundingBoxUpperLeftX  ?ej1ulx2 .
                         ?ej1bb2              aida:boundingBoxUpperLeftY  ?ej1uly2 .
                         ?ej1bb2              aida:boundingBoxLowerRightX ?ej1lrx2 .
                         ?ej1bb2              aida:boundingBoxLowerRightY ?ej1lry2
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:ShotVideoJustification .
                         ?edge_justification1 aida:shot                   ?ej1sid
                  }
                  OPTIONAL {
                         ?edge_justification1 a                           aida:AudioJustification .
                         ?edge_justification1 aida:startTimestamp         ?ej1st .
                         ?edge_justification1 aida:endTimestamp           ?ej1et
                  }
              
                  BIND( IF( BOUND(?ej1sid), ?ej1sid, "__NULL__") AS ?_ej1sid) .
                  BIND( IF( BOUND(?ej1kfid), ?ej1kfid, "__NULL__") AS ?_ej1kfid) .
                  BIND( IF( BOUND(?ej1so), ?ej1so, "__NULL__") AS ?_ej1so) .
                  BIND( IF( BOUND(?ej1eo), ?ej1eo, "__NULL__") AS ?_ej1eo) .
                  BIND( IF( BOUND(?ej1st), ?ej1st, "__NULL__") AS ?_ej1st) .
                  BIND( IF( BOUND(?ej1et), ?ej1et, "__NULL__") AS ?_ej1et) .
                  BIND( COALESCE(?ej1ulx1, ?ej1ulx2, "__NULL__") AS ?_ej1ulx) .
                  BIND( COALESCE(?ej1uly1, ?ej1uly2, "__NULL__") AS ?_ej1uly) .
                  BIND( COALESCE(?ej1lrx1, ?ej1lrx2, "__NULL__") AS ?_ej1lrx) .
                  BIND( COALESCE(?ej1lry1, ?ej1lry2, "__NULL__") AS ?_ej1lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj1_doceid), str(?_ej1sid), str(?_ej1kfid), str(?_ej1so), str(?_ej1eo), str(?_ej1ulx), str(?_ej1uly), str(?_ej1lrx), str(?_ej1lry), str(?_ej1st), str(?_ej1et) ) AS ?ej1_span ) .
              
              
                  # Get edge's justification span # 2
                  OPTIONAL {
                         ?edge_justification2 a                           aida:TextJustification .
                         ?edge_justification2 aida:startOffset            ?ej2so .
                         ?edge_justification2 aida:endOffsetInclusive     ?ej2eo
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ImageJustification .
                         ?edge_justification2 aida:boundingBox            ?ej2bb1  .
                         ?ej2bb1              aida:boundingBoxUpperLeftX  ?ej2ulx1 .
                         ?ej2bb1              aida:boundingBoxUpperLeftY  ?ej2uly1 .
                         ?ej2bb1              aida:boundingBoxLowerRightX ?ej2lrx1 .
                         ?ej2bb1              aida:boundingBoxLowerRightY ?ej2lry1
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:KeyFrameVideoJustification .
                         ?edge_justification2 aida:keyFrame               ?ej2kfid .
                         ?edge_justification2 aida:boundingBox            ?ej2bb2  .
                         ?ej2bb2              aida:boundingBoxUpperLeftX  ?ej2ulx2 .
                         ?ej2bb2              aida:boundingBoxUpperLeftY  ?ej2uly2 .
                         ?ej2bb2              aida:boundingBoxLowerRightX ?ej2lrx2 .
                         ?ej2bb2              aida:boundingBoxLowerRightY ?ej2lry2
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:ShotVideoJustification .
                         ?edge_justification2 aida:shot                   ?ej2sid
                  }
                  OPTIONAL {
                         ?edge_justification2 a                           aida:AudioJustification .
                         ?edge_justification2 aida:startTimestamp         ?ej2st .
                         ?edge_justification2 aida:endTimestamp           ?ej2et
                  }
              
                  BIND( IF( BOUND(?ej2sid), ?ej2sid, "__NULL__") AS ?_ej2sid) .
                  BIND( IF( BOUND(?ej2kfid), ?ej2kfid, "__NULL__") AS ?_ej2kfid) .
                  BIND( IF( BOUND(?ej2so), ?ej2so, "__NULL__") AS ?_ej2so) .
                  BIND( IF( BOUND(?ej2eo), ?ej2eo, "__NULL__") AS ?_ej2eo) .
                  BIND( IF( BOUND(?ej2st), ?ej2st, "__NULL__") AS ?_ej2st) .
                  BIND( IF( BOUND(?ej2et), ?ej2et, "__NULL__") AS ?_ej2et) .
                  BIND( COALESCE(?ej2ulx1, ?ej2ulx2, "__NULL__") AS ?_ej2ulx) .
                  BIND( COALESCE(?ej2uly1, ?ej2uly2, "__NULL__") AS ?_ej2uly) .
                  BIND( COALESCE(?ej2lrx1, ?ej2lrx2, "__NULL__") AS ?_ej2lrx) .
                  BIND( COALESCE(?ej2lry1, ?ej2lry2, "__NULL__") AS ?_ej2lry) .
              
                  BIND( cfn:getSpan(str(?docid), str(?edgecj2_doceid), str(?_ej2sid), str(?_ej2kfid), str(?_ej2so), str(?_ej2eo), str(?_ej2ulx), str(?_ej2uly), str(?_ej2lrx), str(?_ej2lry), str(?_ej2st), str(?_ej2et) ) AS ?_ej2_span ) .
                  BIND(IF(?edge_num_cjs = 1, "", ?_ej2_span) AS ?ej2_span)
                  FILTER(?ej1_span > ?ej2_span)
                  BIND(IF(?edge_num_cjs = 1, ?ej1_span, CONCAT(CONCAT(?ej2_span,";"),?ej1_span)) AS ?ej_span)
              }
	]]>
     </sparql>
  </graph_query>
</graph_queries>
