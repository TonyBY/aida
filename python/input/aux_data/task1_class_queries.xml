<?xml version="1.0" encoding="UTF-8"?>
<class_queries>
  <class_query id="AIDA_TA1_CL_2019_0001">
    <enttype> PER </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0001
              # Query description: Find all informative mentions of type PER
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:PER AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0002">
    <enttype> GPE </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0002
              # Query description: Find all informative mentions of type GPE
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:GPE AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0003">
    <enttype> GPE.Country </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0003
              # Query description: Find all informative mentions of type GPE.Country
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:GPE.Country AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0004">
    <enttype> GPE.Country.Country </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0004
              # Query description: Find all informative mentions of type GPE.Country.Country
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:GPE.Country.Country AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0005">
    <enttype> ORG </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0005
              # Query description: Find all informative mentions of type ORG
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:ORG AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0006">
    <enttype> ORG.Association </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0006
              # Query description: Find all informative mentions of type ORG.Association
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:ORG.Association AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0007">
    <enttype> SID </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0007
              # Query description: Find all informative mentions of type SID
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:SID AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0008">
    <enttype> SID.Ideological </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0008
              # Query description: Find all informative mentions of type SID.Ideological
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:SID.Ideological AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0009">
    <enttype> SID.Ideological.Ideological </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0009
              # Query description: Find all informative mentions of type SID.Ideological.Ideological
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:SID.Ideological.Ideological AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0010">
    <enttype> PER.ProfessionalPosition </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0010
              # Query description: Find all informative mentions of type PER.ProfessionalPosition
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:PER.ProfessionalPosition AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0011">
    <enttype> PER.ProfessionalPosition.Journalist </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0011
              # Query description: Find all informative mentions of type PER.ProfessionalPosition.Journalist
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:PER.ProfessionalPosition.Journalist AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0012">
    <enttype> GPE.UrbanArea </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0012
              # Query description: Find all informative mentions of type GPE.UrbanArea
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:GPE.UrbanArea AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0013">
    <enttype> GPE.UrbanArea.City </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0013
              # Query description: Find all informative mentions of type GPE.UrbanArea.City
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:GPE.UrbanArea.City AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0014">
    <enttype> TTL </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0014
              # Query description: Find all informative mentions of type TTL
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:TTL AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0015">
    <enttype> PER.Politician </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0015
              # Query description: Find all informative mentions of type PER.Politician
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:PER.Politician AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0016">
    <enttype> ORG.Government </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0016
              # Query description: Find all informative mentions of type ORG.Government
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:ORG.Government AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0017">
    <enttype> FAC </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0017
              # Query description: Find all informative mentions of type FAC
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:FAC AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0018">
    <enttype> FAC.Building </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0018
              # Query description: Find all informative mentions of type FAC.Building
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:FAC.Building AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0019">
    <enttype> FAC.Building.ApartmentBuilding </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0019
              # Query description: Find all informative mentions of type FAC.Building.ApartmentBuilding
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:FAC.Building.ApartmentBuilding AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0020">
    <enttype> PER.Politician.Mayor </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0020
              # Query description: Find all informative mentions of type PER.Politician.Mayor
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:PER.Politician.Mayor AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0021">
    <enttype> PER.Politician.Governor </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0021
              # Query description: Find all informative mentions of type PER.Politician.Governor
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:PER.Politician.Governor AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0022">
    <enttype> PER.Police </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0022
              # Query description: Find all informative mentions of type PER.Police
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:PER.Police AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0023">
    <enttype> PER.Police.ChiefOfPolice </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0023
              # Query description: Find all informative mentions of type PER.Police.ChiefOfPolice
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:PER.Police.ChiefOfPolice AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0024">
    <enttype> ORG.PoliticalOrganization </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0024
              # Query description: Find all informative mentions of type ORG.PoliticalOrganization
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:ORG.PoliticalOrganization AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0025">
    <enttype> ORG.PoliticalOrganization.Party </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0025
              # Query description: Find all informative mentions of type ORG.PoliticalOrganization.Party
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:ORG.PoliticalOrganization.Party AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0026">
    <enttype> PER.Protester </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0026
              # Query description: Find all informative mentions of type PER.Protester
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:PER.Protester AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0027">
    <enttype> PER.Combatant </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0027
              # Query description: Find all informative mentions of type PER.Combatant
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:PER.Combatant AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0028">
    <enttype> ORG.MilitaryOrganization </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0028
              # Query description: Find all informative mentions of type ORG.MilitaryOrganization
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:ORG.MilitaryOrganization AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0029">
    <enttype> ORG.MilitaryOrganization.NonGovernmentMilitia </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0029
              # Query description: Find all informative mentions of type ORG.MilitaryOrganization.NonGovernmentMilitia
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:ORG.MilitaryOrganization.NonGovernmentMilitia AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0030">
    <enttype> FAC.Building.OfficeBuilding </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0030
              # Query description: Find all informative mentions of type FAC.Building.OfficeBuilding
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:FAC.Building.OfficeBuilding AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0031">
    <enttype> VAL </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0031
              # Query description: Find all informative mentions of type VAL
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:VAL AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0032">
    <enttype> VAL.Number </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0032
              # Query description: Find all informative mentions of type VAL.Number
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:VAL.Number AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0033">
    <enttype> VAL.Number.Number </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0033
              # Query description: Find all informative mentions of type VAL.Number.Number
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:VAL.Number.Number AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0034">
    <enttype> PER.Combatant.Mercenary </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0034
              # Query description: Find all informative mentions of type PER.Combatant.Mercenary
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:PER.Combatant.Mercenary AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0035">
    <enttype> PER.Fan </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0035
              # Query description: Find all informative mentions of type PER.Fan
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:PER.Fan AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0036">
    <enttype> PER.Fan.SportsFan </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0036
              # Query description: Find all informative mentions of type PER.Fan.SportsFan
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:PER.Fan.SportsFan AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0037">
    <enttype> COM </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0037
              # Query description: Find all informative mentions of type COM
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:COM AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0038">
    <enttype> WEA </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0038
              # Query description: Find all informative mentions of type WEA
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:WEA AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0039">
    <enttype> WEA.Bomb </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0039
              # Query description: Find all informative mentions of type WEA.Bomb
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:WEA.Bomb AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0040">
    <enttype> WEA.Bomb.MolotovCocktail </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0040
              # Query description: Find all informative mentions of type WEA.Bomb.MolotovCocktail
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:WEA.Bomb.MolotovCocktail AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0041">
    <enttype> FAC.Structure </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0041
              # Query description: Find all informative mentions of type FAC.Structure
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:FAC.Structure AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0042">
    <enttype> FAC.Structure.Plaza </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0042
              # Query description: Find all informative mentions of type FAC.Structure.Plaza
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:FAC.Structure.Plaza AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0043">
    <enttype> ORG.Government.Agency </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0043
              # Query description: Find all informative mentions of type ORG.Government.Agency
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:ORG.Government.Agency AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0044">
    <enttype> WEA.ThrownProjectile </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0044
              # Query description: Find all informative mentions of type WEA.ThrownProjectile
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:WEA.ThrownProjectile AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0045">
    <enttype> WEA.ThrownProjectile.Rock </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0045
              # Query description: Find all informative mentions of type WEA.ThrownProjectile.Rock
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:WEA.ThrownProjectile.Rock AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0046">
    <enttype> VEH </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0046
              # Query description: Find all informative mentions of type VEH
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:VEH AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0047">
    <enttype> VEH.WheeledVehicle </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0047
              # Query description: Find all informative mentions of type VEH.WheeledVehicle
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:VEH.WheeledVehicle AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0048">
    <enttype> FAC.GeographicalArea </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0048
              # Query description: Find all informative mentions of type FAC.GeographicalArea
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:FAC.GeographicalArea AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0049">
    <enttype> FAC.GeographicalArea.Checkpoint </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0049
              # Query description: Find all informative mentions of type FAC.GeographicalArea.Checkpoint
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:FAC.GeographicalArea.Checkpoint AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0050">
    <enttype> LOC </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0050
              # Query description: Find all informative mentions of type LOC
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:LOC AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0051">
    <enttype> LOC.Position </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0051
              # Query description: Find all informative mentions of type LOC.Position
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:LOC.Position AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0052">
    <enttype> PER.Combatant.Sniper </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0052
              # Query description: Find all informative mentions of type PER.Combatant.Sniper
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:PER.Combatant.Sniper AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0053">
    <enttype> ORG.MilitaryOrganization.GovernmentArmedForces </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0053
              # Query description: Find all informative mentions of type ORG.MilitaryOrganization.GovernmentArmedForces
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:ORG.MilitaryOrganization.GovernmentArmedForces AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0054">
    <enttype> VEH.Aircraft </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0054
              # Query description: Find all informative mentions of type VEH.Aircraft
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:VEH.Aircraft AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0055">
    <enttype> VEH.Aircraft.Helicopter </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0055
              # Query description: Find all informative mentions of type VEH.Aircraft.Helicopter
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:VEH.Aircraft.Helicopter AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0056">
    <enttype> VEH.MilitaryVehicle </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0056
              # Query description: Find all informative mentions of type VEH.MilitaryVehicle
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:VEH.MilitaryVehicle AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0057">
    <enttype> VEH.MilitaryVehicle.FighterAircraft </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0057
              # Query description: Find all informative mentions of type VEH.MilitaryVehicle.FighterAircraft
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:VEH.MilitaryVehicle.FighterAircraft AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0058">
    <enttype> FAC.Installation </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0058
              # Query description: Find all informative mentions of type FAC.Installation
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:FAC.Installation AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0059">
    <enttype> FAC.Installation.Airport </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0059
              # Query description: Find all informative mentions of type FAC.Installation.Airport
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:FAC.Installation.Airport AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0060">
    <enttype> FAC.Building.GovernmentBuilding </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0060
              # Query description: Find all informative mentions of type FAC.Building.GovernmentBuilding
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:FAC.Building.GovernmentBuilding AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0061">
    <enttype> WEA.Gun </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0061
              # Query description: Find all informative mentions of type WEA.Gun
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:WEA.Gun AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
  <class_query id="AIDA_TA1_CL_2019_0062">
    <enttype> WEA.Gun.Firearm </enttype>
    <sparql>
 	<![CDATA[
              PREFIX ldcOnt: <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/LDCOntology#>
              PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
              PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2019/ontologies/InterchangeOntology#>
              PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
              PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

              # Query: AIDA_TA1_CL_2019_0062
              # Query description: Find all informative mentions of type WEA.Gun.Firearm
              # Aggregate confidence of ?cluster is product of
              #       ?t_cv       # confidenceValue of asserting ?member being of ?type
              #       ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
              #       ?j_cv       # confidenceValue of informativeJustification

              SELECT DISTINCT
                ?docid      # sourceDocument
                ?query_type # query type
                ?cluster    # ?cluster containing ?member1 of type ?type that matches ?query_type
                ?type       # matching ?type
                ?infj_span  # informativeJustification span
                ?t_cv       # confidenceValue of asserting ?member being of ?type
                ?cm_cv      # confidenceValue of asserting ?member being a member of the ?cluster
                ?j_cv       # confidenceValue of informativeJustification

              WHERE {

                  BIND(ldcOnt:WEA.Gun.Firearm AS ?query_type)

                  ?cluster              aida:informativeJustification ?inf_justification .

                  ?statement1           a                             rdf:Statement .
                  ?statement1           rdf:object                    ?type .
                  ?statement1           rdf:predicate                 rdf:type .
                  ?statement1           rdf:subject                   ?member .
                  # ?statement1           aida:justifiedBy              ?inf_justification .
                  ?statement1           aida:confidence               ?t_confidence .
                  ?t_confidence         aida:confidenceValue          ?t_cv .

                  FILTER(cfn:superTypeOf(str(?query_type), str(?type)))

                  ?statement2           a                             aida:ClusterMembership .
                  ?statement2           aida:cluster                  ?cluster .
                  ?statement2           aida:clusterMember            ?member .
                  ?statement2           aida:confidence               ?cm_confidence .
                  ?cm_confidence        aida:confidenceValue          ?cm_cv .

                  ?inf_justification    aida:source          ?doceid .
                  ?inf_justification    aida:sourceDocument  ?docid .
                  ?inf_justification    aida:confidence      ?j_confidence .
                  ?j_confidence         aida:confidenceValue ?j_cv .

                  OPTIONAL {
                         ?inf_justification a                           aida:TextJustification .
                         ?inf_justification aida:startOffset            ?so .
                         ?inf_justification aida:endOffsetInclusive     ?eo
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ImageJustification .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:KeyFrameVideoJustification .
                         ?inf_justification aida:keyFrame               ?kfid .
                         ?inf_justification aida:boundingBox            ?bb  .
                         ?bb                aida:boundingBoxUpperLeftX  ?ulx .
                         ?bb                aida:boundingBoxUpperLeftY  ?uly .
                         ?bb                aida:boundingBoxLowerRightX ?lrx .
                         ?bb                aida:boundingBoxLowerRightY ?lry
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:ShotVideoJustification .
                         ?inf_justification aida:shot                   ?sid
                  }
                  OPTIONAL {
                         ?inf_justification a                           aida:AudioJustification .
                         ?inf_justification aida:startTimestamp         ?st .
                         ?inf_justification aida:endTimestamp           ?et
                  }

                  BIND( IF( BOUND(?sid), ?sid, "__NULL__") AS ?_sid) .
                  BIND( IF( BOUND(?kfid), ?kfid, "__NULL__") AS ?_kfid) .
                  BIND( IF( BOUND(?so), ?so, "__NULL__") AS ?_so) .
                  BIND( IF( BOUND(?eo), ?eo, "__NULL__") AS ?_eo) .
                  BIND( IF( BOUND(?st), ?st, "__NULL__") AS ?_st) .
                  BIND( IF( BOUND(?et), ?et, "__NULL__") AS ?_et) .
                  BIND( IF( BOUND(?ulx), ?ulx, "__NULL__") AS ?_ulx) .
                  BIND( IF( BOUND(?uly), ?uly, "__NULL__") AS ?_uly) .
                  BIND( IF( BOUND(?lrx), ?lrx, "__NULL__") AS ?_lrx) .
                  BIND( IF( BOUND(?lry), ?lry, "__NULL__") AS ?_lry) .

                  BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_sid), str(?_kfid), str(?_so), str(?_eo), str(?_ulx), str(?_uly), str(?_lrx), str(?_lry), str(?_st), str(?_et) ) AS ?infj_span ) .
              }
	]]>
     </sparql>
  </class_query>
</class_queries>
